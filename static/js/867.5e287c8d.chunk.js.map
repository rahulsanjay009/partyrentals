{"version":3,"file":"static/js/867.5e287c8d.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/swipe-back.js","../node_modules/@ionic/core/components/index3.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { k as clamp } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { createGesture } from './index3.js';\n\nconst createSwipeBackGesture = (el, canStartHandler, onStartHandler, onMoveHandler, onEndHandler) => {\n    const win = el.ownerDocument.defaultView;\n    let rtl = isRTL(el);\n    /**\n     * Determine if a gesture is near the edge\n     * of the screen. If true, then the swipe\n     * to go back gesture should proceed.\n     */\n    const isAtEdge = (detail) => {\n        const threshold = 50;\n        const { startX } = detail;\n        if (rtl) {\n            return startX >= win.innerWidth - threshold;\n        }\n        return startX <= threshold;\n    };\n    const getDeltaX = (detail) => {\n        return rtl ? -detail.deltaX : detail.deltaX;\n    };\n    const getVelocityX = (detail) => {\n        return rtl ? -detail.velocityX : detail.velocityX;\n    };\n    const canStart = (detail) => {\n        /**\n         * The user's locale can change mid-session,\n         * so we need to check text direction at\n         * the beginning of every gesture.\n         */\n        rtl = isRTL(el);\n        return isAtEdge(detail) && canStartHandler();\n    };\n    const onMove = (detail) => {\n        // set the transition animation's progress\n        const delta = getDeltaX(detail);\n        const stepValue = delta / win.innerWidth;\n        onMoveHandler(stepValue);\n    };\n    const onEnd = (detail) => {\n        // the swipe back gesture has ended\n        const delta = getDeltaX(detail);\n        const width = win.innerWidth;\n        const stepValue = delta / width;\n        const velocity = getVelocityX(detail);\n        const z = width / 2.0;\n        const shouldComplete = velocity >= 0 && (velocity > 0.2 || delta > z);\n        const missing = shouldComplete ? 1 - stepValue : stepValue;\n        const missingDistance = missing * width;\n        let realDur = 0;\n        if (missingDistance > 5) {\n            const dur = missingDistance / Math.abs(velocity);\n            realDur = Math.min(dur, 540);\n        }\n        onEndHandler(shouldComplete, stepValue <= 0 ? 0.01 : clamp(0, stepValue, 0.9999), realDur);\n    };\n    return createGesture({\n        el,\n        gestureName: 'goback-swipe',\n        /**\n         * Swipe to go back should have priority over other horizontal swipe\n         * gestures. These gestures have a priority of 100 which is why 101 was chosen here.\n         */\n        gesturePriority: 101,\n        threshold: 10,\n        canStart,\n        onStart: onStartHandler,\n        onMove,\n        onEnd,\n    });\n};\n\nexport { createSwipeBackGesture };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\nexport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\n\nconst addEventListener = (el, // TODO(FW-2832): type\neventName, callback, opts) => {\n    // use event listener options when supported\n    // otherwise it's just a boolean for the \"capture\" arg\n    const listenerOpts = supportsPassive(el)\n        ? {\n            capture: !!opts.capture,\n            passive: !!opts.passive,\n        }\n        : !!opts.capture;\n    let add;\n    let remove;\n    if (el['__zone_symbol__addEventListener']) {\n        add = '__zone_symbol__addEventListener';\n        remove = '__zone_symbol__removeEventListener';\n    }\n    else {\n        add = 'addEventListener';\n        remove = 'removeEventListener';\n    }\n    el[add](eventName, callback, listenerOpts);\n    return () => {\n        el[remove](eventName, callback, listenerOpts);\n    };\n};\nconst supportsPassive = (node) => {\n    if (_sPassive === undefined) {\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => {\n                    _sPassive = true;\n                },\n            });\n            node.addEventListener('optsTest', () => {\n                return;\n            }, opts);\n        }\n        catch (e) {\n            _sPassive = false;\n        }\n    }\n    return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\n// TODO(FW-2832): types\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n    let rmTouchStart;\n    let rmTouchMove;\n    let rmTouchEnd;\n    let rmTouchCancel;\n    let rmMouseStart;\n    let rmMouseMove;\n    let rmMouseUp;\n    let lastTouchEvent = 0;\n    const handleTouchStart = (ev) => {\n        lastTouchEvent = Date.now() + MOUSE_WAIT;\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmTouchMove && pointerMove) {\n            rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n        }\n        /**\n         * Events are dispatched on the element that is tapped and bubble up to\n         * the reference element in the gesture. In the event that the element this\n         * event was first dispatched on is removed from the DOM, the event will no\n         * longer bubble up to our reference element. This leaves the gesture in an\n         * unusable state. To account for this, the touchend and touchcancel listeners\n         * should be added to the event target so that they still fire even if the target\n         * is removed from the DOM.\n         */\n        if (!rmTouchEnd) {\n            rmTouchEnd = addEventListener(ev.target, 'touchend', handleTouchEnd, options);\n        }\n        if (!rmTouchCancel) {\n            rmTouchCancel = addEventListener(ev.target, 'touchcancel', handleTouchEnd, options);\n        }\n    };\n    const handleMouseDown = (ev) => {\n        if (lastTouchEvent > Date.now()) {\n            return;\n        }\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmMouseMove && pointerMove) {\n            rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n        }\n        if (!rmMouseUp) {\n            rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n        }\n    };\n    const handleTouchEnd = (ev) => {\n        stopTouch();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const handleMouseUp = (ev) => {\n        stopMouse();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const stopTouch = () => {\n        if (rmTouchMove) {\n            rmTouchMove();\n        }\n        if (rmTouchEnd) {\n            rmTouchEnd();\n        }\n        if (rmTouchCancel) {\n            rmTouchCancel();\n        }\n        rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n    };\n    const stopMouse = () => {\n        if (rmMouseMove) {\n            rmMouseMove();\n        }\n        if (rmMouseUp) {\n            rmMouseUp();\n        }\n        rmMouseMove = rmMouseUp = undefined;\n    };\n    const stop = () => {\n        stopTouch();\n        stopMouse();\n    };\n    const enable = (isEnabled = true) => {\n        if (!isEnabled) {\n            if (rmTouchStart) {\n                rmTouchStart();\n            }\n            if (rmMouseStart) {\n                rmMouseStart();\n            }\n            rmTouchStart = rmMouseStart = undefined;\n            stop();\n        }\n        else {\n            if (!rmTouchStart) {\n                rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n            }\n            if (!rmMouseStart) {\n                rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n            }\n        }\n    };\n    const destroy = () => {\n        enable(false);\n        pointerUp = pointerMove = pointerDown = undefined;\n    };\n    return {\n        enable,\n        stop,\n        destroy,\n    };\n};\nconst getDocument = (node) => {\n    return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n    const radians = maxAngle * (Math.PI / 180);\n    const isDirX = direction === 'x';\n    const maxCosine = Math.cos(radians);\n    const threshold = thresh * thresh;\n    let startX = 0;\n    let startY = 0;\n    let dirty = false;\n    let isPan = 0;\n    return {\n        start(x, y) {\n            startX = x;\n            startY = y;\n            isPan = 0;\n            dirty = true;\n        },\n        detect(x, y) {\n            if (!dirty) {\n                return false;\n            }\n            const deltaX = x - startX;\n            const deltaY = y - startY;\n            const distance = deltaX * deltaX + deltaY * deltaY;\n            if (distance < threshold) {\n                return false;\n            }\n            const hypotenuse = Math.sqrt(distance);\n            const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n            if (cosine > maxCosine) {\n                isPan = 1;\n            }\n            else if (cosine < -maxCosine) {\n                isPan = -1;\n            }\n            else {\n                isPan = 0;\n            }\n            dirty = false;\n            return true;\n        },\n        isGesture() {\n            return isPan !== 0;\n        },\n        getDirection() {\n            return isPan;\n        },\n    };\n};\n\n// TODO(FW-2832): types\nconst createGesture = (config) => {\n    let hasCapturedPan = false;\n    let hasStartedPan = false;\n    let hasFiredStart = true;\n    let isMoveQueued = false;\n    const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n    const canStart = finalConfig.canStart;\n    const onWillStart = finalConfig.onWillStart;\n    const onStart = finalConfig.onStart;\n    const onEnd = finalConfig.onEnd;\n    const notCaptured = finalConfig.notCaptured;\n    const onMove = finalConfig.onMove;\n    const threshold = finalConfig.threshold;\n    const passive = finalConfig.passive;\n    const blurOnStart = finalConfig.blurOnStart;\n    const detail = {\n        type: 'pan',\n        startX: 0,\n        startY: 0,\n        startTime: 0,\n        currentX: 0,\n        currentY: 0,\n        velocityX: 0,\n        velocityY: 0,\n        deltaX: 0,\n        deltaY: 0,\n        currentTime: 0,\n        event: undefined,\n        data: undefined,\n    };\n    const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n    const gesture = GESTURE_CONTROLLER.createGesture({\n        name: config.gestureName,\n        priority: config.gesturePriority,\n        disableScroll: config.disableScroll,\n    });\n    const pointerDown = (ev) => {\n        const timeStamp = now(ev);\n        if (hasStartedPan || !hasFiredStart) {\n            return false;\n        }\n        updateDetail(ev, detail);\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime = timeStamp;\n        detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n        detail.event = ev;\n        // Check if gesture can start\n        if (canStart && canStart(detail) === false) {\n            return false;\n        }\n        // Release fallback\n        gesture.release();\n        // Start gesture\n        if (!gesture.start()) {\n            return false;\n        }\n        hasStartedPan = true;\n        if (threshold === 0) {\n            return tryToCapturePan();\n        }\n        pan.start(detail.startX, detail.startY);\n        return true;\n    };\n    const pointerMove = (ev) => {\n        // fast path, if gesture is currently captured\n        // do minimum job to get user-land even dispatched\n        if (hasCapturedPan) {\n            if (!isMoveQueued && hasFiredStart) {\n                isMoveQueued = true;\n                calcGestureData(detail, ev);\n                requestAnimationFrame(fireOnMove);\n            }\n            return;\n        }\n        // gesture is currently being detected\n        calcGestureData(detail, ev);\n        if (pan.detect(detail.currentX, detail.currentY)) {\n            if (!pan.isGesture() || !tryToCapturePan()) {\n                abortGesture();\n            }\n        }\n    };\n    const fireOnMove = () => {\n        // Since fireOnMove is called inside a RAF, onEnd() might be called,\n        // we must double check hasCapturedPan\n        if (!hasCapturedPan) {\n            return;\n        }\n        isMoveQueued = false;\n        if (onMove) {\n            onMove(detail);\n        }\n    };\n    const tryToCapturePan = () => {\n        if (!gesture.capture()) {\n            return false;\n        }\n        hasCapturedPan = true;\n        hasFiredStart = false;\n        // reset start position since the real user-land event starts here\n        // If the pan detector threshold is big, not resetting the start position\n        // will cause a jump in the animation equal to the detector threshold.\n        // the array of positions used to calculate the gesture velocity does not\n        // need to be cleaned, more points in the positions array always results in a\n        // more accurate value of the velocity.\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime;\n        if (onWillStart) {\n            onWillStart(detail).then(fireOnStart);\n        }\n        else {\n            fireOnStart();\n        }\n        return true;\n    };\n    const blurActiveElement = () => {\n        if (typeof document !== 'undefined') {\n            const activeElement = document.activeElement;\n            if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur) {\n                activeElement.blur();\n            }\n        }\n    };\n    const fireOnStart = () => {\n        if (blurOnStart) {\n            blurActiveElement();\n        }\n        if (onStart) {\n            onStart(detail);\n        }\n        hasFiredStart = true;\n    };\n    const reset = () => {\n        hasCapturedPan = false;\n        hasStartedPan = false;\n        isMoveQueued = false;\n        hasFiredStart = true;\n        gesture.release();\n    };\n    // END *************************\n    const pointerUp = (ev) => {\n        const tmpHasCaptured = hasCapturedPan;\n        const tmpHasFiredStart = hasFiredStart;\n        reset();\n        if (!tmpHasFiredStart) {\n            return;\n        }\n        calcGestureData(detail, ev);\n        // Try to capture press\n        if (tmpHasCaptured) {\n            if (onEnd) {\n                onEnd(detail);\n            }\n            return;\n        }\n        // Not captured any event\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n        capture: false,\n        passive,\n    });\n    const abortGesture = () => {\n        reset();\n        pointerEvents.stop();\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    return {\n        enable(enable = true) {\n            if (!enable) {\n                if (hasCapturedPan) {\n                    pointerUp(undefined);\n                }\n                reset();\n            }\n            pointerEvents.enable(enable);\n        },\n        destroy() {\n            gesture.destroy();\n            pointerEvents.destroy();\n        },\n    };\n};\nconst calcGestureData = (detail, ev) => {\n    if (!ev) {\n        return;\n    }\n    const prevX = detail.currentX;\n    const prevY = detail.currentY;\n    const prevT = detail.currentTime;\n    updateDetail(ev, detail);\n    const currentX = detail.currentX;\n    const currentY = detail.currentY;\n    const timestamp = (detail.currentTime = now(ev));\n    const timeDelta = timestamp - prevT;\n    if (timeDelta > 0 && timeDelta < 100) {\n        const velocityX = (currentX - prevX) / timeDelta;\n        const velocityY = (currentY - prevY) / timeDelta;\n        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n    }\n    detail.deltaX = currentX - detail.startX;\n    detail.deltaY = currentY - detail.startY;\n    detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n    // get X coordinates for either a mouse click\n    // or a touch depending on the given event\n    let x = 0;\n    let y = 0;\n    if (ev) {\n        const changedTouches = ev.changedTouches;\n        if (changedTouches && changedTouches.length > 0) {\n            const touch = changedTouches[0];\n            x = touch.clientX;\n            y = touch.clientY;\n        }\n        else if (ev.pageX !== undefined) {\n            x = ev.pageX;\n            y = ev.pageY;\n        }\n    }\n    detail.currentX = x;\n    detail.currentY = y;\n};\nconst now = (ev) => {\n    return ev.timeStamp || Date.now();\n};\n\nexport { createGesture };\n"],"names":["createSwipeBackGesture","el","canStartHandler","onStartHandler","onMoveHandler","onEndHandler","win","ownerDocument","defaultView","rtl","isRTL","getDeltaX","detail","deltaX","createGesture","gestureName","gesturePriority","threshold","canStart","startX","innerWidth","isAtEdge","onStart","onMove","stepValue","onEnd","delta","width","velocity","velocityX","getVelocityX","shouldComplete","missingDistance","realDur","dur","Math","abs","min","clamp","addEventListener","eventName","callback","opts","listenerOpts","supportsPassive","capture","passive","add","remove","node","undefined","_sPassive","Object","defineProperty","get","e","getDocument","Document","config","hasCapturedPan","hasStartedPan","hasFiredStart","isMoveQueued","finalConfig","assign","disableScroll","direction","maxAngle","onWillStart","notCaptured","blurOnStart","type","startY","startTime","currentX","currentY","velocityY","deltaY","currentTime","event","data","pan","createPanRecognizer","thresh","radians","PI","isDirX","maxCosine","cos","dirty","isPan","start","x","y","detect","distance","hypotenuse","sqrt","cosine","isGesture","getDirection","gesture","GESTURE_CONTROLLER","name","priority","fireOnMove","tryToCapturePan","then","fireOnStart","blurActiveElement","document","activeElement","blur","reset","release","pointerUp","ev","tmpHasCaptured","tmpHasFiredStart","calcGestureData","pointerEvents","createPointerEvents","pointerDown","pointerMove","options","rmTouchStart","rmTouchMove","rmTouchEnd","rmTouchCancel","rmMouseStart","rmMouseMove","rmMouseUp","lastTouchEvent","handleTouchStart","Date","now","target","handleTouchEnd","handleMouseDown","handleMouseUp","stopTouch","stopMouse","stop","enable","arguments","length","destroy","timeStamp","updateDetail","requestAnimationFrame","abortGesture","prevX","prevY","prevT","timeDelta","changedTouches","touch","clientX","clientY","pageX","pageY"],"sourceRoot":""}